# Bienvenue sur le guide utilisateur

Souvenez-vous, ce n'est que texte.

FoldingText fait quelques trucs cools, mais au final vous ne faites qu'éditer du texte. Si vous savez taper, vous savez déjà presque tout ce que vous devez connaître pour utiliser efficacemen,t FoldingText.

(Cliquer sur "#" pour augmenter ou replier le titre)

* * *

# Mettre en forme votre Document

Au fur et à mesure que vous tapez votre document est automatiquement mis en page en utilisant une syntaxe-basée sur [Markdown](http://daringfireball.net/projects/markdown/). La mise en page avec les niveaux de paragraphes vosu permet de passer d'un paragraphe normal à quelque chose de plus spécifique comme un en-tête ou un item de liste.


- Pour créer un titre, tapez "#" suivi d'un espace.
- Pour créer un item, tapez "-" suivi d'un espace.
- Pour créer un item deliste numérotée, tapez "1." suivi d'un espace.
- Pour créer un bloc de citation, tapez ">" suivi d'un espace.
- Pour créer un bloc de code, tapez quatre espaces suivis du code.
- Pour créer une règle de division horizontale, tapez "* * *".
- Pour créer un type de définition tapez ":" en tout début d'une ligne.

Vous pouvez aussi mettre en page le texte dans un paragraphe. Nous appelons cela la mise en page dans la liga impacte les espaces d'un texte dans la ligne au lieu du paragraphe entier.

- Pour mettre en forme du texte en *italique*, entourez le avec des  *s (astérisques simples).
- Pour mettre en forme du texte en **gras**, entourez-le avec des **s (double astérisques).
- Pour mettre en forme du texte en `code`, entourez le avec des `s (accent grave unique).
- Pour créer un lien entourez le texte avec des []s suivis immmédiatement de l'URL cible entourée de ()s. Ceci est un lien vers la [page d'accueil](http://foldingtext.com) de FoldingText . (Pour voir la mise en forme du lien, faites un **option-clic** sur lui pour placer le curseur dans le texte sans activer le lien.)

Par défaut la syntaxe de mise en forme dans la ligne est automatiquement cachée. Pour désactiver ce comportement, décochez l'item de menu View > Hide Inline Syntax menu item.

Pour en savoir plus sur la façon dont FoldingText comprend le Markdown, regardez la FAQ

* * *

# Travailler avec votre texte

Généralement FoldingText devrait fonctionner comme tout autre éditeur de texte : vous tapez, et ce que vous tapez coule en bas de la page. Mais il dispose aussi de quelques fonctionnalités uniques.


## Migrer les items en haut et en bas

Migrez l'item en cours, ou tous les items sélectionnés, en utilisant les commandes Items > Move Left/Right/Up/Down. Ceci est génial pour trier les listes et les blocs de texte. La commande "Move" fonctionne sur la structure de l'idéateur, par conséquent si vous migrez un item avec ses enfants, les enfants seront aussi migrés. Pour indenter une ligne sans indenter les enfants utilisez Items > Indent.

## Listes auto-formatées

FoldingText formate automatiquement vos listes ordonnées et non ordonnées. Quand vous êtes dans une liste et pressez Retour, une nouvelle liste est créée. Pour empêcher ce comportement, utilisez Option-Retour.


## Substitutions Automatiques de Texte

FoldingText peut être réglé pour reconnaître les liens et remplacer le texte dont vous ne voulez pas par le texte que vous désirez. Ces options sont disponibles dans Edit > Substitutions. 

Smart Links
:	Règle FoldingText pour détecter automatiquement que quelque chose que vous avez tapé est une adresse email cliquable ou une URL

Remplacement de Texte 
:	Remplace un ou plusieurs caractères avec un ou plusieurs caractères différents. Par exemple, quand vous tapez (c), vous pouvez faire en sorte que FoldingText le convertisse automatiquement en ©. Pour configurer votre liste de substitutions allez sur Préférences Systèmes > Language & Text > Text.

Smart List Numbering
:	Règle FoldingTexte pour maintenir automatiquement la numérotation des items de listes ordonnés. Une fois activée les numéros de listes seront mis à jour quand vous presserez Tab ou indenterez un item, ou quand vous presserez Retour quand vous êtes sur un item de liste ordonnée.

## Sélectionner la structure du document

FoldingText ajoute des commandes pour sélectionner la structure de votre document. Par exemple, placez votre curseur sur cette ligne, et puis sélectionnez l'item du menu Edit > Selection > Expand Selection (Option-Command-Up Arrow).

La sélection est augmentée, d'abord sur le mot en cours, puis pour la phrase en cours, puis pour la ligne en cours, et puis pour toute la structure de titre, une étape à la fois. Aussi, si la sélection est dans un texte mis en forme, la sélection s'étent à la mise en forme. Si vous allez trop loin, sélectionnez la commande is within formatted text the selection extends to formatting. If you go too far, select the command Edit > Selection > Contract Selection (Option-Command-Down Arrow) to shrink the selection one level at a time.

## Tabulation pour changer les niveaux de structure

Quand vous pressez la touche tabulation le niveau de structure de la ligne en cours est augmenté. Pour lesl lignes normales, cela veut dire qu'une tabulation est insérée au début. Pour les titres et blocs de citations, un "#" ou "> " est inséré respectivement en début de ligne. Dans chaque cas, le niveau de structure de la ligne est ajusté, et cela affecte la façon de fonctionner des fonctionnalités du pliage.


Utilisez Maj-Tab pour diminuer le niveau de structure de la ligne en cours. Vous pouvez aussi manipuler plusieurs lignes en une avec la majuscule : Sélectionnez simplement toutes les lignes que vous voulez déplacer, puis pressez Tab. Et pour finir, si vous voulez juste insérer une Tab normale, utilisez alors Option-Tab.


* * *

##### Plier & Se Concentrer


FoldingText vous permet de plier et de vous concentrer sur les parties de votre document. Dans chaque cas, les items sont cachés dans la vue, vous permettant de vous concentrer sur une sous-partie du contenu de votre document.

Quand vous "pliez" un item, ses items enfants sont dissimulés de la vue. FoldingText indique que les items sont cachés en plaçant un `(…)` après la ligne pliée.

Quand vous vous "concentrez", votre vue est rétrécie et cet état est représentée par un indicateur triangle `…` dans le coin tout en haut et à gauche. Cliquez cet indicateur pour revenir à la vue précédente. (?)

###### Folding

Le pliage vous permet d'augmenter et de contracter les en-t$etes de sections, comme ce que vous pouvez faire sur n'importe quel logiciel d'outliner (idéateur).

- Pour rétracter un titre, cliquez sur le "#" devant le titre.
- Pour dilater un titre, cliquez de nouveau sur le "#".
- Pour dilater/rétracter tous les titres contenus, tenez la touche Majuscule au moment de cliquer sur le "#".

Il existe aussi des commandes de pliage dans le menu View qui agissent sur la séleciton en cours.

- Pour contracter l'item en cours choisissez View > Collapse (Option-Command-Left Arrow).
- Pour augmenter l'item en cours choisissez View > Expand (Option-Command-Right Arrow).
- Pour augmenter/rétracter tous les items visibles sélectionnez tout  (Command-A) et puis choisissez l'item de menu Expand ou Collapse menu item.
- Pour réduire tous les items contenus invoquez la commande View > Collapse deux fois dans une ligne.
- Pour dilater les items contenus invoquez la commande View > Expand deux fois dans une ligne.

###### Focus In

Focus In vous permet de vous concentrer sur un titre spécifique. Similaire à la commande "hoist" fournie par quelques logiciels outliner.

- Pour vous concentrer sur un titre Command-Click le "#". Ou utilisez View > Go to… (Command-L)
- Pour visualiser de nouveau la totalité de votre document, Command-Click de nouveau le "#", ou utilisez View > Go to… > Home (Command-LL).

* * *

# Pause Trucs et Astuces Avant les Trucs Plus Avancées

- Utilisez View > Go to… (Command-L) pour naviguer rapidement dans votre sructure de document et vous concentrer sur un titre spécifique. Utilisez View > Go to… > Home (Command-LL) pour voir de nouveau la totalité du document.

- Pour copier la sélection actuelle comme du HTML, utiliez Option-Command-C.

- Pour placer le curseur dans un lien sans le lancer, pressez la touche Option et cliquez sur le lien.

- Pour fuir la mise en page automatique des listes sur une nouvelle ligne, utilisez Option-Return.

- Pour créer une nouvelle ligne sans diviser la ligne actuelle, utilisez Commande-Retour.

- Pour insérer un caractère normal de tabulation au lieu de changer le niveau de structure d'une ligne, utilisez Option-Tab.

- Beaucoup de commandes du menu disposent d'un raccourci. Vous pouvez aussi ajouter ou les ré-assigner à partir du tableau de bord **Préférences Système > Clavier > Raccourcis**.

- Si vous avez plusieurs moniteurs, vous pourriez préférer le mode "Full Screen Single" (Window > Enter Full Screen Single) qui ne blanchira pas vos autres moniteurs.

- Les listes triées ou non triées sont toujours indentées à au moins un niveau. La syntaxe pour l'en-tête de liste est comptée comme une tabulation.

- Au moment de sauvegarder un nouveau document, l'extension de fichier par défaut est mémorisée. Ainsi si vous voulez utiliser une extension par défaut différente, changez la simplement une fois au moment de sauvegarder, et la prochaine fois votre choix sera mémorisé.

* * *

# Utiliser le Mode Commande de FoldingText

Le mode commande de Folding vous permet d'exécuter des commandes en tapant leurs noms au lieu de les sélectionner avec les items du menu. Cette approche est rapide, sans vous obliger à vous souvenir d'un raccourci clavier pour chaque commande.

- Pour ouvrir le mode commande utilisez le raccourci Command-'.
- Pour exécuter une commande tapez le nom de la commande et pressez Retour.
- Pour sortir sans exécuter une commande, pressez Escape.

Vous pouvez ajouter vos propres commandes au Mode Commande pour placer des scripts à l'intérieur du "Répertoire Scripts" de FoldingText. Pour en savoir plus sur l'utilisation des scripts et les installer afin qu'ils soient accessibles en mode commande, lisez la section "Utiliser des Scripts" de ce guide.

Les plugins Javascript peuvent aussi ajouter des commandes au Mode Commande. Pour en savoir plus, voir la section "Plugins Utilisateurs" de ce guide.

* * *

# Utiliser les Modes pour Résoudre des Problèmes Spécifiques-à-des-Tâches

Les Modes dopent FoldingText pour résoudre des problèmes-spécifiques-aux-tâches. Par exemple, avec le mode "todo" inclus vous pouvez transformer une liste non ordonnée en une liste to-do avec des boutons à cliquer. Voici comment ça fonctionne. 

Chantal.todo
	- Décrire la vision globale. @done
	- Décrire comment fonctionnent les modes.

Cette todo est tapée comme une liste non ordonnée, mais parce que les items de listes sont indentés sous "Chantal.todo", ils reçoivent une mise en forme et un comportement spécial. Les tirets sont remplacés par des boutons à cocher, et si vous cliquez sur un bouton à cocher, la ligne est remise en forme avec un formatage barré.
		

Cet exemple fonctionne parce que l'extension ".todo" en fin de ligne assigne le mode "todo" à cette ligne et à toutes les lignes qu'elle contient.

Pour voir comment cela fonctionne, modifiez la liste le texte  ".todo" au-dessus en ".tod". Quand vous faites les changements les boîtes à cocher se tranforment en puces normales et la mise en forme barrée disparaît parce qu'il n'y a pas de comportement particulier pour le mode ".tod" dans cette version de FoldingText.

Les modes sont un mécanisme d'extension pour FoldingText. En fait nous espérons même permettre aux utilisateurs de créer et partager leurs propres modes. Pour voir et apprendre les modes installés sur votre version de FoldingText jetez un oeil dans le menu Help pour les Guides Utilisateurs spécifiques aux modes.

* * *

# Utiliser les Tags et Propriétés pour Structurer les Data

Les tags et propriétés vous donnent un moyen standard d'ajouter de la data structurée à FoldingText. Ceci n'est généralement pas requis quand vous êtes en train d'écrire, mais ils deviennent utiles au moment de faire un travail plus spécifiquement centré sur une tâche.

## Tags

Les tags peuvent être embarqués n'importe où dans votre texte. Par exemple le mode .todo utilise le tag "done" pour indiquer qu'une tâche est finie.

- Pour créer un tag, tapez "@" suivi du nom du tag.
- Pour assigner une valeur à un tag ajoutez "(value)" tout de suite après le nom du tag. Par exemple ceci est un tag `du` avec une valeur de `2013-11-29` @du(2013-12-29)
- Pour filtrer votre document par un tag, cliquez sur le nom du tag. Cliquez sur la valeur pour n'inclure que les noeuds avec ce tag ET cette valeur.

Les tags peuvent être inclus une fois par ligne. Si vous incluez le même tag plusieurs fois, seul le premier sera reconnu. Il y a aussi un certain nombre de mots réservés qui ne peuvent pas être utilisés comme noms de tags. Ce sont : id, class, type, line, mode, modeContext, level, property, name, et value.

## Propriétés

Les propriétés sont comme les tags, si ce n'est qu'elles existent sur leurs propres lignes. Par exemple le mode .timer utilise la propriété "start" pour enregistrer la date de démarrage du time.


- Pour créer une propriété, tapez le nom de la propriété, (un mot unique) suivi de " : " (espace, deux-points, espace) sur sa propre ligne. Les propriétés sont utilisées pour assigner des valeurs nommées au texte qui les contient.
- Pour assigner une valeur à une propriété, tapez la valeur après la syntaxe " : ".

## Usages Futurs (Ceux-Ci Ne Sont Pas Encore Implémentés)

Les tags et propriétés sont utiles, mais deviendront encore plus utiles au fur et à mesure que ces fonctionnalités seront ajoutées à FoldingText :

Quand **styling** sera ajouté, vous pourrez assigner un style CSS personnalisé aux lignes basées sur les tags que contient la ligne. Un exemple simple sera de pouvoir créer une règle qui règle la ligne d'arrière blanc sur yellow quand la ligne est taguée @yellow.

Quand l'**utilisateur a créé des modes** sont ajoutés ils pourront utiliser les tags et propriétés pour stocker l'information en rapport, comme le font actuellement les modes .todo et .timer. Ceci maintiendra une cohérence sur la plateforme même dans le cas où un nouveau comportement est ajouté.

* * *

# Utiliser les Chemins Node ++à réviser++

Jusqu'à ce stade j'ai parlé des titres, des items de listes, etc. Mais en interne ces trucs (n'importe quel paragraphe) sont représentés par des noeuds. Par exemple, un titre est un noeud avec un type de titre. Le terme "noeud" est utilisé pour souligner le fait que nous avons affaire à une structure en arbre.

C'est ce que sont les noeuds. Les chemins de noeuds sont des requêtes utilisées pour trouver et faire référence à ces noeuds. À cette heure ils ne sont utilisés que par l'interface AppleScript pour spécifier les noeuds qui sont en train d'être programmés. Mais dans le futur il sera aussi possible de les utiliser pour filtrer votre document.

Les chemins de noeuds de FoldingText sont basés sur [Xpath](http://www.w3schools.com/xpath/), mais avec une syntaxe différente pour les attributs et expressions booléennes, et avec une concentration sur le texte au lieu des types de noeuds.

## Chemins

Les chemins simples de noeuds ressemblent et fonctionnent comme les chemins de systèmes de fichiers. Par exemple le chemin du noeud vers cette section "Paths" ressemble à quelque chose comme ça :

    /Utiliser les Chemins Node/Chemins

Quand ce chemin est évalué, il trouve d'abord tous les noeuds au niveau le plus haut dans le document qui contiennent le texte "Node Paths", et puis pour chaque noeud correspondant, il renvoie tous les enfants qui contiennent le texte "Paths".

Dans l'exemple au-dessus chaque étape a sélectionné le prochain ensemble de noeuds à partir des enfants du dernier jeu correspondant. Ceci est appelé l'axe "enfant" et c'est le paramétrage par défaut. Mais vous pouvez utiliser une syntaxe différente pour chercher sur un autre axe, par exemple : 

    /Projets//Paper

La syntaxe en plus "/" avant "Paper" signifie qu'après les résultats provenant de la première étape soient calculés, alors l'axe devrait être cherché au lieu de l'axe "child". Ceci trouvera donc toutes les lignes qui contiennent "Paper" dans la section complète "Projects", pas juste dans les enfants directs de la section "Projects".

L'opérateur '//' peut être utilisé aussi pour démarrer un chemin de noeud. Dans ce cas, l'exemple au-dessus ressemblerait à : 

    //Projets/Paper

Now this means that instead of searching for any top level nodes, *all* nodes containing 'Projects' will be searched and only those children containing 'Paper' will be returned.

Until now, we've seen how to find nodes using filters progressively for children. However, if you know the properties of a child, and want the parent to be returned, the '..' syntax is very useful. Here's an example:

    //@done/..*

This node path finds all the nodes which have at least one child node with a `@done` tag.

## Axes

Generally node paths follow the same [axis rules and syntaxes](http://www.w3schools.com/xpath/xpath_axes.asp) as defined by Xpath, but we've added one extra axis to make filtering easier. For example:

    /NodePaths///filter

The '///' syntax means to start with all descendants (same as '//' syntax), but then to filter them and return the nodes that match the filter and the ancestors of those nodes. It's a little hard to type it all out, but I think for many people it's the default behavior that they want when viewing the results of a filter–show the matches and their ancestors.

The other axes supported are:

ancestor
:	Returns all ancestors matching predicate

ancestor-or-self
:	Returns nodes and their ancestors matching predicate

descendant
:	Returns all descendants matching predicate. Same as '//' operator

descendant-or-self
:	Returns nodes and their descendants matching predicate

following
:	Returns all nodes following each of the previously matched nodes

following-sibling
:	Returns sibling nodes following each of the previously matched nodes

preceding
:	Returns all nodes preceding each of the previously matched nodes

preceding-sibling
:	Returns sibling nodes preceding each of the previously matched nodes

child
:	Searches child node, same as '/' operator

parent
:	Searches parent node, same as '..' operator

self
:	Matches predicate on the same node

filter-descendants
:	Filter all selected nodes based on predicate, same as '///' operator
	
**Note:** Although '/' used alone represents the 'child' axis, whenever '/' is used with an axis specification, like in:

    /NodePaths/parent::*

It only serves as a path separator, loses its 'child' axis property and adopts, instead, the explicitly stated axis i.e. 'parent' in the above example.

## Set Operations

Node paths also supports set operations (union, intersect, and except) for combining the results of multiple paths. Here's a more complex example:

    (/Inbox//* union //@today) except //@done

The above query returns the entire contents "Inbox" combined with any line anywhere that has a "@today" tag, but it then excludes any lines that have a "@done" tag.

## Predicates

The text between each path axis is the predicate that's used to test against each node in that axis. The basic form of a node path predicate is:

    @<attribute> <relation> <search term>

You don't have to specify each element in the pattern. If you don't specify something then a default value will be used. For example the following predicates are all equivalent because "line" is the default attribute and "contains" is the default relation:

    @line contains Inbox
    @line Inbox
    contains Inbox
    Inbox

This makes predicates very simple to start with, if you want to find nodes that contain inbox, just type "Inbox". But you can also be very specific with your testing and you can even combine multiple tests with boolean expressions.

If you want a fast way to match anything you can use the special form predicate "*" which will match all nodes along the given axis without having to do any comparisons.

### Attributes

The first part of a predicate is the attribute that you want to test against. The previous examples targeted the built in "line" attribute. You can test against other built in attributes, tag attributes that you define, inline spanning attributes, and property attributes.

#### Built in Attributes

Each node has the following built in attributes:

type
:	This attribute will always have a value of `heading`, `ordered`, `unordered`, `blockquote`, `codeblock`, `linkdef`, `property`, `body`, `term`, `definition`, `horizontalrule`, or `empty`.

line
:	The node's entire line of text. For example you can use "@line contains joe" to match all nodes that contain the text "joe".

mode
:	Mode declared by this node. For example "@mode = todo" will return all lines that end with ".todo".

modeContext
:	Mode context effecting this node. For example "@modeContext = todo" will return the nodes that are under the influence (descendants) of a node that declares a ".todo" mode.

id
:	Each node is assigned a unique ID. These ID's are stable for the lifetime of the open document, but when you close the document they are lost. ID's aren't useful for user searches, but they can provide a useful handle to a node when doing scripting work.

property
:	Allows access to this nodes property attributes. See "Property Attributes" below.

#### Tag Attributes

You can add your own custom attributes to a node by adding tags to the node's line, and then match them like this:

To match lines with a "@priority" tag type:

    @priority

To match lines with a "@priority(1)" tag type:

    @priority = 1

#### Inline Attributes

You can also target inline spanning attributes such as **strong** and *emphasis*. You do that by adding a ":" after the built in "line" attribute and then typing the inline attribute name. For example:

To match lines with **strong** text type:

    @line:strong

To match lines with **strong** text containing "cat" type:

    @line:strong contains cat

Another useful inline spanning attribute is "text". Its value is the text content of the line excluding leading syntax and trailing tags.

### Property Attributes

You can also target properties. This allows you to match nodes based on their property node children. For example this matches all lines that have a "myproperty" property whose value is "with value":

    @property:myproperty = with value

### Relations

Relations determine the kind of test that you want the predicate to perform. Node path predicates support the following relations: "=", "!=", "<", ">", "<=", ">=", "beginswith", "endswith", and "matches" which does a regular expression match.

By default all comparisons are performed on case insensitive string values. You can change this behavior by providing a modifier after the relation like this:

    @line contains [modifier] a value

Right now four modifiers are supported which apply to all relations except for "match". Match relations are always case sensitive, but you can make them case insensitive using regular expression syntax.

i
:	Case insensitive compare, both the attribute value and the comparison value are converted to lower case before doing the compare. This is the default modifier.

s
:	Case sensitive compare, neither the attribute value or comparison value are modified before doing the compare.

n
:	Numeric compare, both the attribute value and comparison value are converted to numbers before doing the compare. So for example the values "0" and "0.0" would be equal when doing a numeric compare, but not when doing a normal string compare.

d
:	Date compare, both the attribute value and comparison value are converted to dates before doing the compare.

### Values

Most of the time you can just type the values that you are looking for and it works. However, if you want to look for something that has special meaning in the node path syntax, then you need to first enclose the value in quotes. For example to find all lines that contain an equal sign, your search must enclose the value in quotes like this:

    @line contains "="

Unless the value contains a keyword you do not need to enclose it in quotes. This is true even if the value has multiple words. For example this is perfectly valid:

    line contains my search terms and not @done

This matches nodes that have the text "my search terms" and are not tagged with "@done".

### Boolean expressions

You can combine predicates with logical "and", "or", and "not" operators. To match nodes that contain both the text "one" and "two", or the text "three" then type:

    (one and two) or three

To match nodes that don't have the "@done" tag type:

    not @done

# Utiliser les Scripts

Scripts allow you to automate FoldingText. We've created a list of scripts that you can try in the [extensions section](http://www.foldingtext.com/posts/extensions/) of our website.

To try a script, first make sure that you have FoldingText open with a new test document. It's best to first try new scripts on a test document so that you can be sure that it works as you expect.

Next, open the "AppleScript Editor" application that's included on all Mac OS X computers, and paste the script code into a new "AppleScript Editor" window. Then press the green "Run" button and see if the script works.

## Installer le Script

If you decide to keep the script you should install it so that it's easier to run. You have two options when installing the script.

### Installer le Script dans le Mode Commande de FoldingText

When you install a script this way it will be accessible through FoldingText's View > Command Mode menu item.

1. In FoldingText choose the File > Open Scripts Folder menu. Since FoldingText is a sandboxed application, it is not allowed to run any arbitrary script on your system. FoldingText can only run only scripts that you put into this scripts folder.

2. If you have not yet created that folder FoldingText will display an alert asking you to create it. (For security reasons FoldingText is not allowed to create it for you). When you click "OK" to dismiss the alert FoldingText will open your "Library" folder in the Finder. You will then need to create a new folder named "Application Scripts" in your library folder, if it doesn't yet exist. And inside that "Application Scripts" folder you'll need to create a new folder named "com.foldingtext.FoldingText".

3. That "com.foldingtext.FoldingText" folder is where you need to put scripts that you want to run from FoldingText's Command Mode. You will need to close an reopen any existing documents to have the new scripts made available in their Command Modes. To run a script just enter Command Mode and type the scripts name.

### Install Script in Script Menu in Menu Bar

When you install a script this way it will accessible through a menu item in the main menu bar.

1. Open the "AppleScript Editor" application and open it's general preferences pane. Make sure that "Show Script menu in menu bar" is checked.

2. Click on that new script menu item in your menu bar and choose "Open Scripts Folder > Open User Scripts Folder".

3. Save the script that you were testing into that folder. Make sure to save using the "Script" format, it's faster and some scripts wont work properly unless they are saved in "Script" format.

Once you've done this the script be listed in the Script menu in your menu bar. To run the script just select it from that menu. You can also use tools such as [FastScripts](http://www.red-sweater.com/fastscripts/) and [Keyboard Maestro](http://www.keyboardmaestro.com/main/) to  setup keyboard shortcuts to launch scripts.

* * *

# Utiliser les Plugins

Plugins allow you to add new behavior to FoldingText. We've created a list of plugins that you can try in the [extensions section](http://www.foldingtext.com/posts/extensions/) of our website.

To install a plugin:

1. Use File > Open Plugins Folder to open the plugins folder.
2. Copy the plugin into that folder.
3. The plugin should now get loaded into any new document that you create. You will need to close an reopen any existing documents to have the plugin loaded into them.

Often plugins will add new commands that are accessible through View > Command Mode. But you should read the plugin documentation to learn exactly how to use it.

If you would like to create your own plugin please read "Plugin API Documentation" which you can find through Help > Plugin API Documentation.

* * *

# Creating your own AppleScripts

This section explains how to create your own AppleScripts. If you just want to use an existing script please see the "Using Scripts" section of this guide.

Scripting is documented in three places:

1. This guide gives a high level overview.
2. These [example scripts](http://www.foldingtext.com/posts/extensions/scripts/) give you working examples.
3. AppleScript commands are documented in the script suites. Command-Drag FoldingText onto the AppleScript Editor.app to view these.

## Scripting Suite Concepts 

FoldingText's internal data structure is an ordered tree of nodes. When scripting it's often necessary to refer to specific nodes. FoldingText provides five ways to do this. You'll use these 'at' parameters in many places.

ids
:	List of node ids. Each node is assigned a unique id when it's first created.

range
:	Ranges don't reference individual nodes. Instead they reference a range of text, defined by a `location` and `length`. Use -1 for either value to refer to the last position in your document. 

indexes
:	List of node line indexes. Use -1 to index the end of the list.

path
:	Node path (see "Using Node Paths" section) that is evaluated to determine which nodes are referenced.

branch
:	Often the command will take a `with branch` modifier. When `with branch` is included the command will target the entire branch of each node. So for example if you delete a node by id `with branch`, then that node is deleted AND any descendant nodes.

Nodes are central to scripting FoldingText. When scripting they are presented in plain text or record form. The record form has the following keys.

id
:	Unique identifier that never changes.

type
:	Types: heading, unordered, body, etc.

level
:	Indentation level, starting at 0.

mode
:	Declared mode, `timer` or `todo` for example.

tags
:	Record of tag names and there values.

tagNames
:	List of tag names, needed by AppleScript since it can't iterate over the key names in the tags record.

text
:	Text content minus type syntax characters and trailing tags.

line
:	Entire text content of the node.

textIndex
:	Node start's character index in the document text.

lineIndex
:	Node's line index in the ordered list of all nodes.

childIndex
:	Node's child index in its parent's list of children.

parentID
:	id of the node's parent.

firstChildID
:	id of the node's first child.

lastChildID
:	id of the node's last child.

previousSiblingID
:	id of the node's previous sibling.

nextSiblingID
:	id of the node's next sibling.

## Model Scripting Suite

FoldingText's ordered tree of nodes is powerful, but not always convenient to work with. Because of this FoldingText allows you to work with your document content from either a plain text perspective or a nodes perspective.

### Text Perspective

The text perspective hides the underlying node structure and presents your document content as a single block of text. You can read this text using the `read text` command. And you can update it using the `update text` command. The text perspective is useful when you don't care about the underlying structure. The structure will be maintained for you behind the scenes if you make changes.

### Nodes Perspective

The nodes perspective presents your document content as an ordered list of node records. You can read nodes using the `read nodes` command. Updated nodes using the `update nodes` command. Create nodes using the `create nodes` command. And delete nodes using the `delete nodes` command.

When you create nodes you don't need to provide values for each possible key in the node record. In fact many of the keys will be ignored even if you do provide them. These are the keys considered when creating a new node. You don't need to include them all.

type
:	Type. heading, unordered, body, etc.

level
:	Indentation level, starting at 0.

mode
:	Declared mode; `timer` or `todo` for example.

tags
:	Record of tag names and there values.

text
:	Text content minus type syntax characters and trailing tags.

line
:	Entire text content of the node.

By default when you create a new node it will be created as the last child of the target node. If you'd like to insert the new node somewhere else in relation to that target node you can use the `with relation` parameter which takes these values.

child,i
:	Insert the node at index `i` in the target's children.

previousSibling
:	Insert the node as the previous sibling of the target.

nextSibling
:	Insert the node as the next sibling of the target.

previousLine
:	Insert the node in the line before the target. Unlike `previousSibling` no adjustment will be made to the inserted node's structure level to match the target.

nextLine
:	Insert the node in the line after the target. Unlike `nextSibling` no adjustment will be made to the inserted node's structure level to match the target.

By default these commands act only on the directly referenced nodes. For example if you delete a heading then only that heading node is deleted, the headings contents are left in place. If you wish to act on the entire structure, then use the `with branch` parameter.

When you update an existing node the changes record can contain any of the above keys that are used when creating a node, and it can also contain these extras as needed.

addTags
:	Record of tag names and values that should be added to the updated node.

removeTags
:	List of tag names that should be removed from the updated node.

lineIndex
:	Index of new line position to move the node to.

parentID
:	ID of an existing node that should become the parent of the updated node.

childIndex
:	New position in parent node's children that the updated node should be moved to.

## View Scripting Suite

The view suite allows you to work with the view state of your document. The selection, the node path, and the expanded and collapsed nodes.

### Selection

The selection gives you access to the current selection as a record with these keys.

text
:	Selected text.

textRange
:	Record with `location` in text where selection starts and `length`.

lineRange
:	Record with `location` of first line where selection starts and `length` of total lines that it spans.

nodeRange
:	`startNode` and `startOffset` for where the selection starts and `endNode` and `endOffset for where the selection ends.

nodeIDs
:	List of node ids that overlap the selection.

nodePath
:	Node path to all selected nodes. Useful if you want to combine the selection with some other node path, and see the results. This can be easily created from `nodeIDs` in most languages, but it's a bit painful in AppleScript, so it's precomputed here.

When updating the selection the changes record should only include one of the keys `text`, `textRange`, `lineRange`, or `nodeRange`. Also the start and end nodes must not be filtered from the view or else the selection update will fail.

### Node Path

The node path property gives access to the node path that's used to filter the view of your document. It, combined with the expanded and collapsed node state determines which nodes are visible in the document window.

### Expanded and Collapsed Nodes

The editor maintains two lists that determine which nodes are collapsed and which are expanded. 

The collapsed nodes list contains nodes that are collapsed. When a node is added to this list of collapsed nodes, all of it's children are hidden, even if they would otherwise be visible, matched by the current node path.

The expanded nodes list contains nodes that have been explicitly expanded. Not all expanded nodes will be present in this list, because nodes are expanded by default if they have a visible child. But if the node path doesn't match a node's children, you can force show those children by putting that parent node into this list of expanded nodes.

You can update these lists by setting them to a new list. Or if you just want to add/remove a few nodes at a time use the `update expanded` and `update removed` commands.

## Core Scripting Suite

Behind the scenes all FoldingText scripting is routed through a single `HTTP request` command. There isn't any HTTP server running in the background, but it does mimicking the HTTP style.

If you are already familiar with AppleScript, and you plan to write your scripts in AppleScript, then you probably don't want to use `HTTP request` directly. But if you are more familiar with HTTP then AppleScript, and want to write your scripts in Python, Ruby, or some other language, then working directly with `HTTP request` can be useful.

`HTTP request` allows you to work in the HTTP style, with JSON formatted data, and only bridge to AppleScript to make the final request. Call to the terminal using `osascript` to make the final request. For example this to gets the JSON representation of all nodes in the front document.

    osascript -e 'tell front document of application "FoldingText" to HTTP request URI "/nodes.json"'

Many of the URIs, parameters, behaviors, and formats used by the `HTTP request` command can be guessed from the above AppleScript documentation and the AppleScript suite documentation. But to get started your best bet is to download the example scripts. They demonstrate all the possible URIs and how you might use them.

# Références des Items du Menu

This section explains FoldingText-specific menu item commands:

File > Export As HTML
:	Export the current document as HTML. This export uses standard Markdown, which means some MultiMarkdown syntax that FoldingText displays (such as definition lists) won't be exported. I recommend [Marked](http://markedapp.com) if you need more sophisticated export.

File > Open Scripts Folder
:	Open FoldingText's scripts folder where you can place AppleScripts so that they will be accessible through Command Mode. See the "Using Scripts" section.

File > Open Plugins Folder
:	Open FoldingText's plugin folder so that you can add/remove FoldingText plugins. See the "Using Plugins" section.

File > Print
:	Prints a plain text unformatted version of your text. If you want to print out a formatted version of your text I recommend first converting your document to HTML and then print that.

Edit > Copy as HTML
:	Copies the current selection in HTML format. To do this is takes the current text selection and runs it through a Markdown converter, and places that result on the clipboard. I recommend [Marked](http://markedapp.com) if you need more sophisticated export.

Edit > Copy as Rich Text
:	Copies the current selection in Rich Text format. This works well for bold, italic, and list formatting, but doesn't support more complex formats. I recommend [Marked](http://markedapp.com) if you need more sophisticated export.

Edit > Select > Select Branch
:	Selects the current branch that the text cursor is in. In FoldingText a branch includes the item for the current line and all contained items.

Edit > Select > Expand Selection
:	Expands the selection up one level. The selection levels go: All > Branch > Paragraph > Sentence > Word.

Edit > Select > Contract Selection
:	Contracts the selection down one level. The selection levels go: All > Branch > Paragraph > Sentence > Word.

Edit > Substitutions > Smart List Numbering
:	When checked FoldingText will automatically maintain the numbering in your ordered list items when you press Return to create a new item, or Tab to indent an item. You can temporarily disable this behavior by holding down the Option key when pressing Return or Tab.

Format > Bold
:	Inserts the Markdown for bolded text (**text here**) or wraps any selected text. 

Format > Italic
:	Inserts the Markdown for italicized text (*text here*) or wraps any selected text.

Format > Code
:	Inserts the Markdown for showing code text (`text here`) or wraps any selected text.

Format > Add Link
:	Inserts the Markdown for a hyperlink. The link's visible text goes in the square brackets [] and the URL goes in the parentheses (). If used on selected text, the visible text is filled in with the selection.

Format > Text Wrap Width
:	Sets the document's column wrap in characters per line or wrap to window size.

View > Go to…
:	Displays a menu with all the headers and sections. Select a section to focus on it by clicking on its name, using the arrow keys + return, or typing the first few letters + return.

View > Focus In
:	Focuses in a selected header. When you focus or filter your view is narrowed and this state is represented by a triangle '…' indicator in the upper left corner.

View > Focus Out
:	Moves up one focus level at a time. For example, if you focus on a level 2 header, using Focus Out will first show that section and the level 3 header's text, then Focus Out again will show all of the document again.

View > Command Mode
:	Opens command mode where you can perform commands by typing their names. Most useful for accessing plugin functionality, see the section "Using FoldingText's Command Mode" for more info.

View > Expand
:	Expands the selected header line or all selected header lines. Use it twice to expand all the headers inside the collapsed section as well.

View > Collapse
:	Collapses the selected header line or all selected header lines. Use it twice to collapse all the headers inside the collapsed section as well. Collapsed lines display a '…' at the end of the line.

View > Zoom In
:	Increases the text size percentage.

View > Zoom Out
:	Decreases the text size percentage.

View > Actual Size
:	Resets the zoom level to default.

View > Hide Inline Syntax
:	Disables the automatic formatting and displays the formatting syntax for the entire document.

View > Overhang List Bullets
:	Changes how list bullets are displayed. When enabled, list bullets hang into the left-hand margin instead of being slightly indented.

View > Typewriter Scrolling
:	Centers the text cursor on the screen (when possible) whenever you type. This is most useful when in full screen mode, allowing you to type in the center of the screen, instead of down at the bottom.

Items > Indent
:	Moves selected lines one hierarchy level deeper by indenting to the right. On a header line, this increases the header level by adding # marks (as a text editor-style command).

Items > Un-indent
:	Moves selected lines one hierarchy level higher by un-indenting to the left. On a header line, this decreases the header level by removing # marks.

Items > Move Section Left
:	Moves selected lines and any text indented underneath one hierarchy level higher by un-indenting to the left (as an outliner-style command).

Items > Move Section Right
:	Moves selected lines and any text indented underneath one hierarchy level deeper by indenting to the right.

Items > Move Section Up
:	Moves the line or selected sections up by one line. If a header is collapsed and you move the header line up, all its contents will move with it.

Items > Move Section Down
:	Moves the line or selected sections down by one line. If a header is collapsed and you move the header line down, all its contents will move with it.

Items > Change Type
:	Changes the entire line or selected lines to another line style (body, blockquote, code, heading, list item, unordered list item)

Window > Enter Full Screen Single
:	Displays the document in full screen mode. Use this if you use multiple monitors or don't like 10.7/10.8's standard full screen mode. Changes to Exit Full Screen Single when in full screen mode.

Window > Enter Full Screen
:	Displays the document in OS X 10.7/10.8's full screen mode. Changes to Exit Full Screen when in full screen mode.

# FAQ
## Comment je change l'extension de fichier.ft par défaut

FT se souvient que la dernière extensionde fichier que vous avez sauvegardé sous `"Save As"` et l'utilise pour les futurs documents. Aussi pour modifier l'extension de fichier par défaut, vous pouvez :
	1. Créer un nouveau document et choisir File > Save 
	2. Si besoin cliquez sur la flèche disclosure pour voir le tableau de bord complet avec toutes les options
	3. Décochez "Hide extension" s'il est coché
	4. Taper le nom du fichier (y compris l'extension de fichier) que vous voulez utiliser.
## Comment FoldingText traite le Markdown


FoldingText est un idéateur qui utilise la syntaxe basée sur Markdown pour définir la structure de l'outline. Utiliser la syntaxe basée sur Markdown pourrait faire croire que Folding Text semble être un éditeur Markdown de plus, mais ce n'est vraiment pas ce que c'est. Dans son noyay, FT est un outliner et a des objectifs similaires mais équivalents quand on le compare à un éditeur Markdown traditionnel.

Initialement l'objectif primaire de Markdown (et aussi des éditeurs Markdown) a été de vous permettre de créer un document en  plein texte lisible et ensuite de générer un document HTML finalisé à partir de ce texte source. Avec Markdown traditionnel l'objectif final est de produire un document HTML fini.

L'objectif prioritaire de FoldingText est de vous permettre de taper dans un texte plein lisible pour créer une structure d'outliner, que vous pouvez ensuite réutiliser pour réfléchir et travailler.

Il y a beaucoup de points communs et chevauchements, vous pouvez bien sûr penser et travailler dans un éditeur traditionnel Markdown, et FT peut être utilisé p our créer des documents dont le but final sera l'export HTML. Mais les différents focus signifient que la syntaxe reconnue de FT diverge du Markdown standard à un certain nombre d'endroits, qui sont listés ici :  

###Syntaxe Markdown Non Reconnue

1. FoldingText ne fait de coloration syntaxique des autres types (titres, listes embarqué dans les blocs de citation).
2. FoldingText ne colore pas les blocs de citations embarqués dans les items de liste.
3. FoldingText ne colore pas la syntaxe Setex-style de titres-ceux qui sont "soulignés" en utilisant des signes égal (pour les titres de premier niveau) et les tirets (pour les titres de second niveau).
4. FoldingText requiert un espace après le > dans les blocs de citation. (Markdown ne requiert pas cet espace)
5. FoldingText requiert que les items de listes démarrent avec des tabulations optionnelles par des caractères de listes (-, *, or +). Markdown vous permet de démarrer avec 1-3 espaces.
6. FoldingText requiert que les blocs de code utilisent la syntaxe 4 espaces avant. Markdown standard autorise aussi que les blocs de code démarrent avec des tabulations poiur d'autres objectifs. (Voir les Additions Markdown)

Il devrait être soulingé que FT peut ouvrir et éditer n'importe quel fichier plein texte. Incluant des fichiers Markdown avec n'importe lesquelles des fonctionnalités au-dessus. Mais elles ne sont pas supportées dans le sens où la structure outliner que Folding Text crée sera différente dans ces cas si on la compare à ce que créerait le Markdown standard.

### Syntaxe Additionnelle FoldingText

FoldingText augmente la syntaxe Markdown avec de nouvelles fonctionnalités qui aident à faire de FoldingTex un meilleur endroit pour réfléchir et organiser l'information. Je listerai juste ici les fonctionnalités, voir le guide de l'utilisateur pour l'information de mise en forme :

	
	1. FoldingText vous permet d'appliquer des tags à n'importe quelle ligne  
	2. FoldingText vous permet d'appliquer les tags à n'importe quelle ligne.
    FoldingText allows you to create property lines.
    FoldingText allows you to assign a specific mode to part of your document using file extension syntax.
    FoldingText uses tab indentation to create outline structure in normal paragraphs.
    FoldingText support MultiMarkdown style definition lists.

Section:
    Frequently Asked Questions
Last Updated:
    September 21, 2012

    How does FoldingText relate to Markdown
    How to create Pomodoro worksheet in FoldingText
    When will FoldingText be available on iOS or Windows?
    How do I create a new FoldingText theme?
    How does FoldingText compare to TaskPaper and WriteRoom
    When can I start writing my own modes for FoldingText
    How do I change the default .ft file extension
    How can I make FoldingText remember which items are collapsed
## Comment puis-créer un nouveau thème FT ?


**Les thèmes FoldingText ne sont pas encore officiellement supportés**. Le système de thème va probablement changer au fur et à mesure et cela veut dire que n'importe quel thème que vous créez maintenant aura besoin d'être misà jour pour fonctionner avec les futures versions de l'app. Ceci étant dit, si vous êtes du type geeky, vous pouvez créer aujourd'hui des thèmes FoldingText.

FoldingText c'est majoritairement une page web embarquée, construite en Javascript et HTML/DOM, avec un peu de code natif autour d'elle. Les thèmes FoldingText sont juste des fichiers CSS qui configurent l'affichage HTML/DOM. Si tous ces mots-clés ne vous sont pas trop étranges, hacker les thèmes devrait être amusant. Si ces termes vous semblent étranges, je recommanderais que vous évitiez d'aller plus loin à ce stade.

Voici les étapes pour créer votre propre thème :

	1. Clic-droit dans le Finder sur `FoldingText.app` et choisissez `Afficher le Contenu du Paquet`
	2. Naviguez jusqu'à `Contents/Resources/javascript-dom-build/scripts/themes`
	3. Copiez l'un de ces répertoires à utiliser comme point de départ pour propre thème. Le thème par défaut et le thème Courier.fttheme, the most bare bones theme is the Times.fttheme.
	4. Après avoir copié le thème, renommer ce dossier Thème en `User.fttheme` et copiez-le à l'intérieur de  `~/Library/Containers/com.foldingtext.FoldingText/Data/Library/Application Support/FoldingText/Themes/User.fttheme`
	5. Maintenant modifiez le fichier CSS qui est dans votre fichier `User.fttheme` comme vous le sentez.

Pour finir, voici une liste des thèmes existants que vous pouvez essayer. Souvenez-vous que ces thèmes là auront probablement tous besoin d'ajustements au fur et à mesure de l'avancement de développement de FoldingText, mais il restent amusants à essayer et utiliser : 

	 [FT Writer](https://github.com/sillyleo/FT-Writer)
	 [Futura (light and dark)](http://support.foldingtext.com/discussions/problems/350-light-and-dark-futura-themes)
	 [Helvetica Neue](http://support.foldingtext.com/discussions/problems/350-light-and-dark-futura-themes)
	 [Explicit Times Theme](http://support.foldingtext.com/discussions/problems/6-explicit-times-theme)
	 [Baskerville](http://support.foldingtext.com/discussions/problems/322-baskerville-theme-for-foldingtext-v11dev)






